# AppVeyor build configuration
# https://www.appveyor.com/docs/build-configuration
# https://www.appveyor.com/docs/appveyor-yml/
#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 1.0.1.0.0.7.{build}-{branch}

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

# branches to build
#branches:
#  whitelist
#  only:
#    - master
#    - production

#   blacklist
#  except:
#    - gh-pages

# Do not build on tags (GitHub and BitBucket)
#skip_tags: true

# Start builds on tags only (GitHub and BitBucket)
#skip_non_tags: true

# Skipping commits with particular message or from specific user
#skip_commits:
# Regex for matching commit message
#  message: /Created.*\.(png|jpg|jpeg|bmp|gif)/
# Commit author's username, name, email or regexp maching one of these.
#  author: John

# Including commits with particular message or from specific user
#only_commits:
# Start a new build if message contains 'build'
#  message: /build/
# Start a new build for commit of user with email jack@company.com
#  author: jack@company.com

# Skipping commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#skip_commits:
#  files:
#    - docs/*
#    - '**/*.html'

# Including commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#only_commits:
#  files:
#    - Project-A/
#    - Project-B/

# Do not build feature branch with open Pull Requests
#skip_branch_with_pr: true

# Maximum number of concurrent jobs for the project
#max_jobs: 1

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# Build worker image (VM template)
image: Visual Studio 2015

# scripts that are called at very beginning, before repo cloning
#init:
#  - git config --global core.autocrlf input

# clone directory
#clone_folder: c:\projects\myproject

# fetch repository as zip archive
# default is "false"
#shallow_clone: true

# set clone depth
# clone entire repository history if not defined
#clone_depth: 5

# setting up etc\hosts file
#hosts:
#  queue-server: 127.0.0.1
#  db.server.com: 127.0.0.2

# environment variables
#environment:
#  my_var1: value1
#  my_var2: value2
# this is how to set encrypted variable.
# Go to "Encrypt data" page in account menu to encrypt data.
#  my_secure_var1:
#    secure: FW3tJ3fMncxvs58/ifSP7w==

# environment:
#  matrix:
#    - tbs_platform: "x64"
#      tbs_config: "Release"
#    - tbs_platform: "x64"
#      tbs_config: "Debug"
#    - tbs_platform: "x64"
#      tbs_config: "AnalysisRelease"
#    - tbs_platform: "Win32"
#      tbs_config: "Release"
#    - tbs_platform: "Win32"
#      tbs_config: "Debug"
#    - tbs_platform: "Win32"
#      tbs_config: "AnalysisRelease"

# environment:
#  global:
#    connection_string: server=12;password=13;
#    service_url: https://127.0.0.1:8090
#
#  matrix:
#  - db: mysql
#    provider: mysql
#
#  - db: mssql
#    provider: mssql
#    password:
#      secure: $#(JFDA)jQ@#$

# this is how to allow failing jobs in the matrix
#matrix:
#  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.
#  allow_failures:
#    - platform: x86
#      configuration: Debug
#    - platform: x64
#      configuration: Release

# build cache to preserve files/folders between builds
cache:
  - '%LocalAppData%\NuGet\Cache'
# preserve "packages" directory in the root of build folder 
# will reset it if packages.config is modified
#  - packages -> **\packages.config
#  - projectA\libs
# local npm modules
#  - node_modules

# enable service required for build/tests
#services:
#  - mssql2014           # start SQL Server 2014 Express
#  - mssql2014rs         # start SQL Server 2014 Express and Reporting Services
#  - mssql2012sp1        # start SQL Server 2012 SP1 Express
#  - mssql2012sp1rs      # start SQL Server 2012 SP1 Express and Reporting Services
#  - mssql2008r2sp2      # start SQL Server 2008 R2 SP2 Express
#  - mssql2008r2sp2rs    # start SQL Server 2008 R2 SP2 Express and Reporting Services
#  - mysql               # start MySQL 5.6 service
#  - postgresql          # start PostgreSQL 9.5 service
#  - iis                 # start IIS
#  - msmq                # start Queuing services
#  - mongodb             # start MongoDB

# scripts that run after cloning repository
#install:
# by default, all script lines are interpreted as batch
#  - echo This is batch
# to run script as a PowerShell command prepend it with ps:
#  - ps: Write-Host 'This is PowerShell'
# batch commands start from cmd:
#  - cmd: echo This is batch again
#  - cmd: set MY_VAR=12345
#install:
#  - ps: if($env:tbs_platform -eq 'x64') { $env:vcvar_arg = 'x86_amd64'; } else { $env:vcvar_arg = 'x86'; }
#  - ps: if($env:tbs_platform -eq 'x64') { $env:setenv_arg = 'x64'; } else { $env:setenv_arg = 'x86'; }
#  - ps: if($env:tbs_platform -eq 'x64') { $env:ms_build_suffix = 'Bin\amd64'; } else { $env:ms_build_suffix = 'Bin'; }
#  - '"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall" %vcvar_arg%'
#  - '"C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /%setenv_arg%'
#  - set PATH=C:\Program Files (x86)\MSBuild\14.0\%ms_build_suffix%;%PATH%

# enable patching of AssemblyInfo.* files
#assembly_info:
#  patch: true
#  file: AssemblyInfo.*
#  assembly_version: "2.2.{build}"
#  assembly_file_version: "{version}"
#  assembly_informational_version: "{version}"

# Automatically register private account and/or project AppVeyor NuGet feeds.
#nuget:
#  account_feed: true
#  project_feed: true
#  disable_publish_on_pr: true
# disable publishing of .nupkg artifacts to
# account/project feeds for pull request builds

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
#platform: Any CPU
# build Configuration, i.e. Debug, Release, etc.
#configuration: Release

# add several platforms to build matrix:
platform:
  - Win32
  - x64
# add several configurations to build matrix:
configuration:
  - Release
  - Debug
  - AnalysisRelease

# use custom build_script
#build: false

# use automatic builds
build:
# enable MSBuild parallel builds
  parallel: true
# path to Visual Studio solution or project
  project: mandelbulber2.sln
#  publish_wap: true               # package Web Application Projects (WAP) for Web Deploy
#  publish_wap_xcopy: true         # package Web Application Projects (WAP) for XCopy deployment
#  publish_azure: true             # package Azure Cloud Service projects and push to artifacts
#  publish_nuget: true             # package projects with .nuspec files and push to artifacts
#  publish_nuget_symbols: true     # generate and publish NuGet symbol packages
#  include_nuget_references: true  # add -IncludeReferencedProjects option while packaging NuGet artifacts

# MSBuild verbosity level
#  verbosity: quiet|minimal|normal|detailed
#  verbosity: Diagnostic

# scripts to run before build
before_build:
# packages from nuget
  - nuget restore mandelbulber2.sln

# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
#before_package:

# scripts to run after build
after_build:
  - netstat -ab
  - tree /F build-win\%CONFIGURATION%\%PLATFORM%
  # zip the archive
  - 7z a mandelbulber-%CONFIGURATION%-%PLATFORM%-%APPVEYOR_REPO_COMMIT%.zip build-win\%CONFIGURATION%\%PLATFORM%

# to run your custom scripts instead of automatic MSBuild
#build_script:
#  - msbuild mandelbulber2.sln /p:Configuration=%tbs_config% /p:Platform=%tbs_platform%

# to disable automatic builds
#build: off

#---------------------------------#
#       tests configuration       #
#---------------------------------#

#test:
#  assemblies:
#    - asm1.dll

#  categories:
#    - UI

# to run tests from different categories as separate jobs in parallel
#test:
#  categories:
#    - A            # A category common for all jobs
#    - [UI]         # 1st job
#    - [DAL, BL]    # 2nd job

# scripts to run before tests
#before_test:
#  - echo script1
#  - ps: Write-Host "script1"

# scripts to run after tests
#after_test:

# to run your custom scripts instead of automatic tests
#test_script:
#  - echo This is my custom test script

# to disable automatic tests
test: off

#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

#specify artifacts to upload
artifacts:
  - path: mandelbulber-%CONFIGURATION%-%PLATFORM%-%APPVEYOR_REPO_COMMIT%.zip
    name: Mandelbulber-%CONFIGURATION%-%PLATFORM%

# pushing a single file
#  - path: test.zip

# pushing a single file with environment variable in path and "Deployment name" specified
#  - path: MyProject\bin\$(configuration)
#    name: myapp

# pushing entire folder as a zip archive
#  - path: logs

# pushing all *.nupkg files in build directory recursively
#  - path: '**\*.nupkg'

#---------------------------------#
#     deployment configuration    #
#---------------------------------#
# TODO: see here for instructions: https://www.appveyor.com/docs/deployment/github
# providers: Local, FTP, WebDeploy, AzureCS, AzureBlob, S3, NuGet, Environment
# provider names are case-sensitive!
#deploy:
# Deploy to GitHub Releases
#  - provider: GitHub
#    artifact: /.*\.nupkg/           # upload all NuGet packages to release assets
#    draft: false
#    prerelease: false
#    on:
#      branch: master                # release from master branch only
#      appveyor_repo_tag: true       # deploy on tag push only

# scripts to run before deployment
#before_deploy:

# scripts to run after deployment
#after_deploy:

# to run your custom scripts instead of provider deployments
#deploy_script:

# to disable deployment
deploy: off

#---------------------------------#
#        global handlers          #
#---------------------------------#

# on successful build
on_success:
  - ECHO "BUILD VICTORY"

# on build failure
on_failure:
  - ECHO "TRY AND TRY AGAIN"

# after build failure or success
on_finish:
# https://www.appveyor.com/docs/environment-variables/
# Environment variables that are set by AppVeyor for every build:
# APPVEYOR - True if build runs in AppVeyor environment;
  - ECHO %APPVEYOR%
# CI - True if build runs in AppVeyor environment;
  - ECHO %CI%
# APPVEYOR_API_URL - AppVeyor Build Agent API URL;
  - ECHO %APPVEYOR_API_URL%
# APPVEYOR_ACCOUNT_NAME - account name;
  - ECHO %APPVEYOR_ACCOUNT_NAME%
# APPVEYOR_PROJECT_ID - AppVeyor unique project ID;
  - ECHO %APPVEYOR_PROJECT_ID%
# APPVEYOR_PROJECT_NAME - project name;
  - ECHO %APPVEYOR_PROJECT_NAME%
# APPVEYOR_PROJECT_SLUG - project slug (as seen in project details URL);
  - ECHO %APPVEYOR_PROJECT_SLUG%
# APPVEYOR_BUILD_FOLDER - path to clone directory;
  - ECHO %APPVEYOR_BUILD_FOLDER%
# APPVEYOR_BUILD_ID - AppVeyor unique build ID;
  - ECHO %APPVEYOR_BUILD_ID%
# APPVEYOR_BUILD_NUMBER - build number;
  - ECHO %APPVEYOR_BUILD_NUMBER%
# APPVEYOR_BUILD_VERSION - build version;
  - ECHO %APPVEYOR_BUILD_VERSION%
# APPVEYOR_PULL_REQUEST_NUMBER - GitHub Pull Request number;
  - ECHO %APPVEYOR_PULL_REQUEST_NUMBER%
# APPVEYOR_PULL_REQUEST_TITLE - GitHub Pull Request title
  - ECHO %APPVEYOR_PULL_REQUEST_TITLE%
# APPVEYOR_JOB_ID - AppVeyor unique job ID;
  - ECHO %APPVEYOR_JOB_ID%
# APPVEYOR_JOB_NAME - job name;
  - ECHO %APPVEYOR_JOB_NAME%
# APPVEYOR_REPO_PROVIDER - github, bitbucket, kiln, vso or gitlab;
  - ECHO %APPVEYOR_REPO_PROVIDER%
# APPVEYOR_REPO_SCM - git or mercurial;
  - ECHO %APPVEYOR_REPO_SCM%
# APPVEYOR_REPO_NAME - repository name in format owner-name/repo-name;
  - ECHO %APPVEYOR_REPO_NAME%
# APPVEYOR_REPO_BRANCH - build branch. For Pull Request commits it is base branch PR is merging into;
  - ECHO %APPVEYOR_REPO_BRANCH%
# APPVEYOR_REPO_TAG - true if build has started by pushed tag; otherwise false;
  - ECHO %APPVEYOR_REPO_TAG%
# APPVEYOR_REPO_TAG_NAME - contains tag name for builds started by tag; otherwise this variable is undefined;
  - ECHO %APPVEYOR_REPO_TAG_NAME%
# APPVEYOR_REPO_COMMIT - commit ID (SHA);
  - ECHO %APPVEYOR_REPO_COMMIT%
# APPVEYOR_REPO_COMMIT_AUTHOR - commit author’s name;
  - ECHO %APPVEYOR_REPO_COMMIT_AUTHOR%
# APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL - commit author’s email address;
  - ECHO %APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL%
# APPVEYOR_REPO_COMMIT_TIMESTAMP - commit date/time;
  - ECHO %APPVEYOR_REPO_COMMIT_TIMESTAMP%
# APPVEYOR_REPO_COMMIT_MESSAGE - commit message;
  - ECHO %APPVEYOR_REPO_COMMIT_MESSAGE%
# APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED - the rest of commit message after line break (if exists);
  - ECHO %APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED%
# APPVEYOR_SCHEDULED_BUILD - True if the build runs by scheduler;
  - ECHO %APPVEYOR_SCHEDULED_BUILD%
# APPVEYOR_FORCED_BUILD (True or undefined) - builds started by “New build” button or from the same API;
  - ECHO %APPVEYOR_FORCED_BUILD%
# APPVEYOR_RE_BUILD (True or undefined) - build started by “Re-build commit/PR” button of from the same API;
  - ECHO %APPVEYOR_RE_BUILD%
# PLATFORM - platform name set on Build tab of project settings (or through platform parameter in appveyor.yml);
  - ECHO %PLATFORM%
# CONFIGURATION - configuration name set on Build tab of project settings (or through configuration parameter in appveyor.yml);
  - ECHO %CONFIGURATION%

#---------------------------------#
#         notifications           #
#---------------------------------#
notifications:
  - provider: Webhook
    url: https://webhooks.gitter.im/e/093389bb43bd353724ae
  - provider: Email
    to:
      - buddhi1980@gmail.com
      - sebastian.jennen@gmx.de
      - RobertPancoast77@gmail.com
#    subject: 'Build {{status}}'                  # optional
#    message: "{{message}}, {{commitId}}, ..."    # optional
#    on_build_status_changed: true


