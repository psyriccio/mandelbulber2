/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,
 *                                        \><||i|=>>%)
 * This file is part of Mandelbulber.     )<=i=]=|=i<>
 * The project is licensed under GPLv3,   -<>>=|><|||`
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Classic Mandelbulb fractal.
 * @reference http://www.fractalforums.com/3d-fractal-generation/true-3d-mandlebrot-type-fractal/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

inline void MandelbulbIteration(
	global float3 *z, __constant cFractal *fractal, global sExtendedAux *aux)
{
	// if (aux->r < 1e-21f) aux->r = 1e-21f;
	float th0 = asin(native_divide(z->z, aux->r)) + fractal->bulb.betaAngleOffset;
	float ph0 = atan2(z->y, z->x) + fractal->bulb.alphaAngleOffset;
	float rp = native_powr(aux->r, fractal->bulb.power - 1.0f);
	float th = th0 * fractal->bulb.power;
	float ph = ph0 * fractal->bulb.power;
	float cth = native_cos(th);
	aux->r_dz = mad((rp * aux->r_dz), fractal->bulb.power, 1.0f);
	rp *= aux->r;
	z->x = cth * native_cos(ph) * rp;
	z->y = cth * native_sin(ph) * rp;
	z->z = native_sin(th) * rp;
}